# Should existing files be overwritten when they have the same name as a file
# that should be downloaded?
overwrite_files = 1

# Set this to true if resumable downloads should be resumed instead of being
# started all over each time.
enable_resume = 1

# Should DownloadDaemon put downloaded files into subdirectories named after 
# the package that contains them (or if possible the download-filename if
# the package doesn't have a name)?
download_to_subdirs = 1

# Enables or disables execution of reconnect scripts (further configuration in
# routerinfo.conf)
enable_reconnect = 0

# Specifies if the downloader is active. If this is set to 0, no new downloads
# will start. If this is set to 0 during runtime, running downloads are not 
# stopped. You may want to run the STOP command on all running downloads.
downloading_active = 1

# This options can be used to do timed downloading (e.g. only donwload at night)
# Specify the time by start-time and end-time in the format <hours>:<minutes>
# (e.g. download_timing_start = 23:00 , download_timing_end = 6:00).
# If one of those options is not specified, this option is inactive and 
# DownloadDaemon will download permanently. Unfinished downloads will finish 
# after _end, but no new downloads will be started.
download_timing_start = 
download_timing_end = 

# Specifies where downloads should be saved (need permission!)
download_folder = /Users/robert/Downloads

# Specifies how many downloads are allowed to run at the same time (if the 
# hosters allow)
simultaneous_downloads = 3

# Specifies how much logging-info should be put out. possible values are: OFF,
# SEVERE, WARNING, INFO and DEBUG
log_level = DEBUG

# Specifies how logging should be done. use "stdout", "stderr" or "syslog"
# You may also specify a file to write log-messages to my using the syntax
# log_procedure = file:/home/whatever/dd.log
# If you do so, you need write-permissions to the file/directory
log_procedure = file:/tmp/dd.log 

# Specifies the password needed to connect to the server (leave blank if none)
mgmt_password = 

# Specifies the Port for the management-clients
# DownloadDaemon has to restart for this to take effect
mgmt_port = 56789

# Refuse links to be added if they already exist in the download list?
refuse_existing_links = 1

# Specifies if the server should only acceppt encrypted connections. 
# plain = plain text only; encrypt = encrypted only, both = client can choose.
mgmt_accept_enc = both

# Sets the maximum download speed which is allowed (in kb/s). Use 0 to unset
# limit. This will only be applied for downloads that have not started yet.
# Running downloads will not change speed.
max_dl_speed = 0

# Specifies to which IP-address DownloadDaemon should bind. leave empty to 
# listen on all devices example: bind_addr = 127.0.0.1
# DownloadDaemon has to restart for this to take effect.
bind_addr = 

# Sets DD's umask and therefore controls permission of downloaded files
# see http://en.wikipedia.org/wiki/Umask for info.
# example: 0022 will be rw-r-r, 0000 will be rw-rw-rw-
# WARNING: making downloaded files executable can be a security risk!
#          you should not do that by default! this variable can not
#          be changed remotely
# DownloadDaemon has to restart for this to take effect.
daemon_umask = 0000

# Set this path to your gocr executable if you want automatic captcha-cracking
# You don't need to have gocr installed in order to use DownloadDaemon, but
# some hosters require this. Leave empty to disable gocr support.
# Only gocr with extended support for more filetypes can be used, so you also
# need to have libnetpbm installed
# for security reason, this variable can not be changed remotely.
gocr_binary = 

# Break up plugin execution after how many retrys of finding the correct
# captcha?
captcha_retrys = 20

# Should DD use plugins that require manual typing of captchas?
captcha_manual = 1

# How long should DD wait until a captcha that has to be typed manually
# was typed in before deactivating the Download and trying something else?
captcha_max_wait = 60

# Provide a ;-separated list of proxys to use proxy-alternation.
# for hosters with an IP-based bandwidth-limit, this can bypass such restrict-
# ions by using different proxys.
# You can not only specify real http-proxys but also ddproxy.php proxys.
# For information on ddproxy.php proxys.php, refer to the script itsself at:
# https://downloaddaemon.svn.sourceforge.net/svnroot/downloaddaemon/trunk/
#     tools/ddproxy.php
# format: <user>:<password>@<ip-address>:<port>; <user>:<password>@....
# format for ddproxy.php: http://<password>@<host>:<port>/<path>/<ddproxy.php>
proxy_list =

# What to do if you get a connection error? try to use another proxy or give
# up? This option specifies if proxys should always be assumed to be online.
# If you set this to 1, a connection error will be handled as a connection
# error. If you set this to 0, DownloadDaemon will try all proxys before
# giving up.
assume_proxys_online = 0

# enable automatic package extraction. suppors rar, gzip, bzip2
# using unrar and tar, if they are installed.
enable_pkg_extractor = 1

# Supply a ;-separated list of passwords that should always be tried to extract
# archives. If you set a password for a specific package, that password will be
# used. If you set no password, Extraction will be tried without one and with
# this list.
pkg_extractor_passwords = 

# After extracting a package successfully, should the downloaded archive files
# be deleted? 0 = Keep the archives, 1 = delete them (EXPERIMENTAL)
delete_extracted_archives = 0

# Optionally specify the paths to tar, unrar and unzip, if you want automatic
# package extraction. If left empty, extraction will be disabled.
# This variables can not be changed remotely for security reason
tar_path = /bin/tar
unrar_path = /usr/bin/unrar
unzip_path = /usr/bin/unzip
#hjsplit or lxsplit path
hjsplit_path = /usr/bin/lxsplit
7z_path = /usr/bin/7z

# Optionally specify the extract dir where you want to extract your downloads
unrar_dir =

# If this is enabled, DownloadDaemon will automatically precheck links when you
# add them, even if we are not in download-time. It will check if the links are
# online, and, if possible, what size they (approximately) have.
precheck_links = 0

# Specify a script that will be executed after each download. You can use
# the following variables in your script: [url], [filename], [dlist], 
# [dl_line], [dl_id], [pkg_id] and [pkg_name]. If you want to use your own
# parameter with blanks, use \ to escape them.
# Example: /bin/postdl [pkg_id] [pkg_name] my\ own\ parameter
# This variable can not be changed remotely for security reason
post_download_script = 

# Careful, if you set this to 1 every variable except this one can be changed
# remotely. This can be a security problem, only use this in private networks
# where downloaddaemon runs behind a firewall.
insecure_mode = 0

# Should DownloadDaemon automatically set the filename as title for a download
# as soon as it is known? Set this to 0 to only manually set titles, to
# 1 if you want to autofill empty titles or to 2 if DD should always fill
# in the title, even if an old title will get replaced
autofill_title = 1

###############################################################################
#################### Things you probably don't want to change #################
###############################################################################

# Specifies the number of allowed connections for the management 
# network-interface (setting this to 1 is definitely NOT enough
# even if only one client will be used at the same time
mgmt_max_connections = 50

# How long to wait if premium authentication fails until we try again
# (0 = deactivate)
auth_fail_wait = 30

# How long to wait if we can't write a file we want to download until we try
# again (0 = deactivate)
write_error_wait = 30

# How long to wait if a generic plugin error happens (plugin doesn't behave 
# correctly) until we try again (0 = deactivate)
plugin_fail_wait = 60

# How long to wait if we lose connection when downloading until we try again 
# (0 = deactivate)
connection_lost_wait = 20

# Specifies the file in which the download list is stored (absolute or recursive
# to <install prefix>/share/downloaddaemon)
dlist_file = /etc/downloaddaemon/dlist

# Set this to 0 to disable recursive ftp-folder downloads. This means: if you
# add an ftp-folder as a download (starting with ftp://, ending with /,
# DownloadDaemon will recursively download all contents in this folder.
recursive_ftp_download = 1
